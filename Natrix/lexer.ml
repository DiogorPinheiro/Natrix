# 1 "lexer.mll"
 
  open Parser
  open Lexing

  exception Lexing_error of char

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

# 14 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\211\255\212\255\213\255\002\000\001\000\002\000\003\000\
    \007\000\008\000\000\000\009\000\000\000\018\000\024\000\002\000\
    \003\000\004\000\005\000\240\255\241\255\242\255\243\255\244\255\
    \245\255\246\255\247\255\248\255\249\255\250\255\001\000\252\255\
    \253\255\254\255\003\000\255\255\001\000\214\255\239\255\238\255\
    \236\255\234\255\011\000\233\255\228\255\016\000\005\000\019\000\
    \232\255\029\000\222\255\016\000\031\000\231\255\031\000\229\255\
    \218\255\224\255\024\000\028\000\227\255\029\000\024\000\039\000\
    \044\000\043\000\039\000\226\255\036\000\044\000\046\000\225\255\
    \033\000\223\255\034\000\052\000\029\000\221\255\041\000\032\000\
    \048\000\044\000\039\000\220\255\051\000\047\000\042\000\219\255\
    \054\000\050\000\045\000\216\255\046\000\046\000\050\000\055\000\
    \215\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\020\000\
    \018\000\044\000\038\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\255\255\
    \255\255\255\255\044\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\000\000\036\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\002\000\037\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\000\000\000\000\000\000\000\000\029\000\000\000\
    \027\000\026\000\031\000\033\000\021\000\032\000\034\000\030\000\
    \036\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000\020\000\015\000\019\000\016\000\041\000\
    \040\000\039\000\038\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\023\000\000\000\022\000\000\000\000\000\
    \000\000\007\000\010\000\079\000\011\000\012\000\009\000\092\000\
    \072\000\014\000\047\000\078\000\051\000\006\000\054\000\058\000\
    \005\000\061\000\004\000\088\000\013\000\074\000\008\000\062\000\
    \055\000\057\000\046\000\025\000\028\000\024\000\043\000\044\000\
    \049\000\048\000\050\000\052\000\053\000\056\000\042\000\059\000\
    \060\000\068\000\063\000\045\000\064\000\065\000\066\000\067\000\
    \069\000\070\000\071\000\073\000\075\000\076\000\077\000\084\000\
    \080\000\081\000\082\000\083\000\085\000\086\000\087\000\089\000\
    \090\000\091\000\093\000\094\000\095\000\096\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\034\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\015\000\
    \016\000\017\000\018\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\006\000\000\000\000\000\000\000\004\000\
    \008\000\000\000\046\000\006\000\012\000\000\000\011\000\010\000\
    \000\000\009\000\000\000\005\000\000\000\007\000\000\000\009\000\
    \011\000\010\000\013\000\000\000\000\000\000\000\014\000\042\000\
    \045\000\047\000\049\000\051\000\052\000\054\000\014\000\058\000\
    \059\000\061\000\062\000\013\000\063\000\064\000\065\000\066\000\
    \068\000\069\000\070\000\072\000\074\000\075\000\076\000\078\000\
    \079\000\080\000\081\000\082\000\084\000\085\000\086\000\088\000\
    \089\000\090\000\092\000\093\000\094\000\095\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 20 "lexer.mll"
                ( TO )
# 161 "lexer.ml"

  | 1 ->
# 21 "lexer.mll"
                ( MAIS )
# 166 "lexer.ml"

  | 2 ->
# 22 "lexer.mll"
                ( MENOS )
# 171 "lexer.ml"

  | 3 ->
# 23 "lexer.mll"
                ( VEZES )
# 176 "lexer.ml"

  | 4 ->
# 24 "lexer.mll"
                ( DIVIDIR )
# 181 "lexer.ml"

  | 5 ->
# 25 "lexer.mll"
                ( AND )
# 186 "lexer.ml"

  | 6 ->
# 26 "lexer.mll"
                ( OR )
# 191 "lexer.ml"

  | 7 ->
# 27 "lexer.mll"
                ( EPAREN )
# 196 "lexer.ml"

  | 8 ->
# 28 "lexer.mll"
                ( DPAREN )
# 201 "lexer.ml"

  | 9 ->
# 29 "lexer.mll"
                ( EBRACE )
# 206 "lexer.ml"

  | 10 ->
# 30 "lexer.mll"
                ( DBRACE )
# 211 "lexer.ml"

  | 11 ->
# 31 "lexer.mll"
                ( ESQUARE )
# 216 "lexer.ml"

  | 12 ->
# 32 "lexer.mll"
                ( DSQUARE )
# 221 "lexer.ml"

  | 13 ->
# 33 "lexer.mll"
                ( VIRGULA )
# 226 "lexer.ml"

  | 14 ->
# 34 "lexer.mll"
                ( SEMICOLON )
# 231 "lexer.ml"

  | 15 ->
# 35 "lexer.mll"
                ( IGUAL )
# 236 "lexer.ml"

  | 16 ->
# 36 "lexer.mll"
                ( DEFINED )
# 241 "lexer.ml"

  | 17 ->
# 37 "lexer.mll"
                ( DIF )
# 246 "lexer.ml"

  | 18 ->
# 38 "lexer.mll"
                ( MAIOR )
# 251 "lexer.ml"

  | 19 ->
# 39 "lexer.mll"
                ( MAIORIGUAL )
# 256 "lexer.ml"

  | 20 ->
# 40 "lexer.mll"
                ( MENOR )
# 261 "lexer.ml"

  | 21 ->
# 41 "lexer.mll"
                ( MENORIGUAL )
# 266 "lexer.ml"

  | 22 ->
# 42 "lexer.mll"
                ( IF )
# 271 "lexer.ml"

  | 23 ->
# 43 "lexer.mll"
                ( THEN )
# 276 "lexer.ml"

  | 24 ->
# 44 "lexer.mll"
                ( ELSE )
# 281 "lexer.ml"

  | 25 ->
# 45 "lexer.mll"
                ( IN )
# 286 "lexer.ml"

  | 26 ->
# 46 "lexer.mll"
                ( DO )
# 291 "lexer.ml"

  | 27 ->
# 47 "lexer.mll"
                ( INTTYPE )
# 296 "lexer.ml"

  | 28 ->
# 48 "lexer.mll"
                ( BOOLTYPE )
# 301 "lexer.ml"

  | 29 ->
# 49 "lexer.mll"
                ( FOR )
# 306 "lexer.ml"

  | 30 ->
# 50 "lexer.mll"
                ( FILLED )
# 311 "lexer.ml"

  | 31 ->
# 51 "lexer.mll"
                ( BY )
# 316 "lexer.ml"

  | 32 ->
# 52 "lexer.mll"
                ( VAR )
# 321 "lexer.ml"

  | 33 ->
# 53 "lexer.mll"
                ( TYPE )
# 326 "lexer.ml"

  | 34 ->
# 54 "lexer.mll"
                ( ARRAY )
# 331 "lexer.ml"

  | 35 ->
# 55 "lexer.mll"
                ( MAXINT )
# 336 "lexer.ml"

  | 36 ->
# 56 "lexer.mll"
                ( MININT )
# 341 "lexer.ml"

  | 37 ->
# 57 "lexer.mll"
                ( DEF )
# 346 "lexer.ml"

  | 38 ->
# 58 "lexer.mll"
                ( AS )
# 351 "lexer.ml"

  | 39 ->
# 59 "lexer.mll"
                ( PRINT )
# 356 "lexer.ml"

  | 40 ->
# 60 "lexer.mll"
                ( RETURN )
# 361 "lexer.ml"

  | 41 ->
# 61 "lexer.mll"
                        ( newline lexbuf; token lexbuf )
# 366 "lexer.ml"

  | 42 ->
# 62 "lexer.mll"
             ( EOF )
# 371 "lexer.ml"

  | 43 ->
# 63 "lexer.mll"
              ( newline lexbuf; token lexbuf )
# 376 "lexer.ml"

  | 44 ->
let
# 64 "lexer.mll"
         c
# 382 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 64 "lexer.mll"
            ( raise (Lexing_error c) )
# 386 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

